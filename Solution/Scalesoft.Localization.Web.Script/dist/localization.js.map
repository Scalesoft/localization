{"version":3,"sources":["localization.ts"],"names":[],"mappings":"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","file":"localization.js","sourcesContent":["const LocalizationStatusSuccess = (text: string, scope: string): ILocalizationStatus => ({\r\n    success: true,\r\n    message: \"Success\",\r\n    text,\r\n    scope,\r\n});\r\n\r\nconst LocalizationDictionaryStatusSuccess = (scope: string): IDictionaryError => ({\r\n    scope,\r\n    context: null,\r\n});\r\n\r\nclass Localization {\r\n    private mGlobalScope = \"global\";\r\n\r\n    private mCultureCookieName: string = \"Localization.Culture\";\r\n    private mCurrentCulture: string;\r\n\r\n    private readonly mDictionary: { [key: string]: LocalizationDictionary } = {};\r\n    private readonly mDictionaryQueue: { [key: string]: Array<(dictionary: LocalizationDictionary) => void> } = {};\r\n\r\n    private mPluralizedDictionary: { [key: string]: LocalizationPluralizationDictionary } = {};\r\n    private readonly mPluralizedDictionaryQueue: { [key: string]: Array<(dictionary: LocalizationPluralizationDictionary) => void> } = {};\r\n\r\n    private readonly mLocalizationConfiguration: ILocalizationConfiguration;\r\n\r\n    private mErrorHandlerCalled = false;\r\n\r\n    public constructor(localizationConfiguration?: ILocalizationConfiguration) {\r\n        this.mLocalizationConfiguration = localizationConfiguration === undefined || localizationConfiguration === null\r\n            ? {\r\n                errorResolution: LocalizationErrorResolution.Key,\r\n            } : localizationConfiguration;\r\n    }\r\n\r\n    private callErrorHandler(errorStatus: ILocalizationError) {\r\n        if (!this.mErrorHandlerCalled) {\r\n            this.mErrorHandlerCalled = true;\r\n\r\n            if (this.mLocalizationConfiguration.onError !== undefined) {\r\n                this.mLocalizationConfiguration.onError(errorStatus);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getTranslationOnError(text: string, scope: string): ILocalizedString | null {\r\n        switch (this.mLocalizationConfiguration.errorResolution) {\r\n            case LocalizationErrorResolution.Null:\r\n                return null;\r\n\r\n            case LocalizationErrorResolution.Key:\r\n                return {\r\n                    name: text,\r\n                    resourceNotFound: true,\r\n                    value: text,\r\n                };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use translateAsync or getDictionaryAsync() => translate\r\n     */\r\n    public translate(\r\n        text: string,\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): ILocalizedString {\r\n        const dictionary = this.getDictionary(scope, cultureName);\r\n\r\n        return dictionary.translate(\r\n            text,\r\n            () => dictionary.getFallbackTranslation(text, scope, cultureName),\r\n        );\r\n    }\r\n\r\n    public translateAsync(\r\n        text: string,\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): Promise<ILocalizationResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.getDictionaryAsync(scope, cultureName)\r\n                .then((dictionaryResponse) => {\r\n                    const result = dictionaryResponse.result.translate(\r\n                        text,\r\n                        () => dictionaryResponse.result.getFallbackTranslation(text, scope, cultureName),\r\n                    );\r\n\r\n                    resolve(\r\n                        new LocalizationResult(\r\n                            result,\r\n                            LocalizationStatusSuccess(text, scope),\r\n                        ),\r\n                    );\r\n                }, (dictionaryResponse: ILocalizationDictionaryResult<LocalizationDictionary>) => {\r\n                    const errorStatus = {\r\n                        success: false,\r\n                        message: \"Unable to load required dictionary\",\r\n                        errorType: \"loadDictionary\",\r\n                        text,\r\n                        scope: dictionaryResponse.status.scope,\r\n                        context: dictionaryResponse.status.context,\r\n                    };\r\n\r\n                    this.callErrorHandler(errorStatus);\r\n\r\n                    reject(\r\n                        new LocalizationResult(\r\n                            this.getTranslationOnError(text, scope),\r\n                            LocalizationStatusSuccess(text, scope),\r\n                        ),\r\n                    );\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use translateFormatAsync or getDictionaryAsync() => translateFormat\r\n     */\r\n    public translateFormat(\r\n        text: string,\r\n        parameters: string[],\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): ILocalizedString {\r\n        const dictionary = this.getDictionary(scope, cultureName);\r\n\r\n        return dictionary.translateFormat(\r\n            text,\r\n            parameters,\r\n            () => dictionary.getFallbackTranslation(text, scope, cultureName),\r\n        );\r\n    }\r\n\r\n    public translateFormatAsync(\r\n        text: string,\r\n        parameters: string[],\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): Promise<ILocalizationResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.getDictionaryAsync(scope, cultureName)\r\n                .then((dictionaryResponse) => {\r\n                    const result = dictionaryResponse.result.translateFormat(\r\n                        text,\r\n                        parameters,\r\n                        () => dictionaryResponse.result.getFallbackTranslation(text, scope, cultureName),\r\n                    );\r\n\r\n                    resolve(\r\n                        new LocalizationResult(\r\n                            result,\r\n                            LocalizationStatusSuccess(text, scope),\r\n                        ),\r\n                    );\r\n                }, (dictionaryResponse: ILocalizationDictionaryResult<LocalizationDictionary>) => {\r\n                    const errorStatus = {\r\n                        success: false,\r\n                        message: \"Unable to load required dictionary\",\r\n                        errorType: \"loadDictionary\",\r\n                        text,\r\n                        scope: dictionaryResponse.status.scope,\r\n                        context: dictionaryResponse.status.context,\r\n                    };\r\n\r\n                    this.callErrorHandler(errorStatus);\r\n\r\n                    reject(\r\n                        new LocalizationResult(\r\n                            this.getTranslationOnError(text, scope),\r\n                            LocalizationStatusSuccess(text, scope),\r\n                        ),\r\n                    );\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use translatePluralizationAsync or getPluralizationDictionaryAsync() => translatePluralization\r\n     */\r\n    public translatePluralization(\r\n        text: string,\r\n        number: number,\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): ILocalizedString {\r\n        const dictionary = this.getPluralizationDictionary(scope, cultureName);\r\n\r\n        try {\r\n            return dictionary.translatePluralization(\r\n                text,\r\n                number,\r\n                () => dictionary.getFallbackTranslation(text, scope, cultureName),\r\n            );\r\n        } catch (exception) {\r\n            return this.handleError(exception, text);\r\n        }\r\n    }\r\n\r\n    public translatePluralizationAsync(\r\n        text: string,\r\n        number: number,\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): Promise<ILocalizationResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this.getPluralizationDictionaryAsync(scope, cultureName)\r\n                .then((dictionaryResponse) => {\r\n                    try {\r\n                        const result = dictionaryResponse.result.translatePluralization(\r\n                            text,\r\n                            number,\r\n                            () => dictionaryResponse.result.getFallbackTranslation(text, scope, cultureName),\r\n                        );\r\n\r\n                        resolve(\r\n                            new LocalizationResult(\r\n                                result,\r\n                                LocalizationStatusSuccess(text, scope),\r\n                            ),\r\n                        );\r\n                    } catch (exception) {\r\n                        reject(\r\n                            new LocalizationResult(\r\n                                this.handleError(exception, text),\r\n                                {\r\n                                    success: false,\r\n                                    message: exception.message,\r\n                                    errorType: \"exception\",\r\n                                    text,\r\n                                    scope,\r\n                                },\r\n                            ),\r\n                        );\r\n                    }\r\n                }, (dictionaryResponse: ILocalizationDictionaryResult<LocalizationDictionary>) => {\r\n                    const errorStatus = {\r\n                        success: false,\r\n                        message: \"Unable to load required pluralization dictionary\",\r\n                        errorType: \"loadDictionary\",\r\n                        text,\r\n                        scope: dictionaryResponse.status.scope,\r\n                        context: dictionaryResponse.status.context,\r\n                    };\r\n\r\n                    this.callErrorHandler(errorStatus);\r\n\r\n                    reject(\r\n                        new LocalizationResult(\r\n                            this.getTranslationOnError(text, scope),\r\n                            LocalizationStatusSuccess(text, scope),\r\n                        ),\r\n                    );\r\n                });\r\n        });\r\n    }\r\n\r\n    private handleError(exception: Error, text: string) {\r\n        console.error(exception.message);\r\n\r\n        return {name: text, value: \"X{error}\", resourceNotFound: true};\r\n    }\r\n\r\n    public configureSiteUrl(siteUrl: string) {\r\n        this.mLocalizationConfiguration.siteUrl = siteUrl;\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use getDictionaryAsync\r\n     */\r\n    private getDictionary(scope?: string, cultureName?: string): LocalizationDictionary {\r\n        scope = this.checkScope(scope);\r\n        cultureName = this.checkCultureName(cultureName);\r\n\r\n        return this.getLocalizationDictionary(scope, cultureName);\r\n    }\r\n\r\n    public getDictionaryAsync(\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): Promise<ILocalizationDictionaryResult<LocalizationDictionary>> {\r\n        scope = this.checkScope(scope);\r\n        cultureName = this.checkCultureName(cultureName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.getLocalizationDictionaryAsync(scope, cultureName, (dictionary: LocalizationDictionary) => {\r\n                resolve(\r\n                    {\r\n                        result: dictionary,\r\n                        status: LocalizationDictionaryStatusSuccess(scope),\r\n                    },\r\n                );\r\n            }, (status: IDictionaryError) => {\r\n                reject(\r\n                    {\r\n                        result: null,\r\n                        status,\r\n                    },\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use getPluralizationDictionaryAsync\r\n     */\r\n    private getPluralizationDictionary(scope?: string, cultureName?: string): LocalizationPluralizationDictionary {\r\n        scope = this.checkScope(scope);\r\n        cultureName = this.checkCultureName(cultureName);\r\n\r\n        return this.getPluralizationLocalizationDictionary(scope, cultureName);\r\n    }\r\n\r\n    public getPluralizationDictionaryAsync(\r\n        scope?: string,\r\n        cultureName?: string,\r\n    ): Promise<ILocalizationDictionaryResult<LocalizationPluralizationDictionary>> {\r\n        scope = this.checkScope(scope);\r\n        cultureName = this.checkCultureName(cultureName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.getPluralizationLocalizationDictionaryAsync(scope, cultureName, (dictionary: LocalizationPluralizationDictionary) => {\r\n                resolve(\r\n                    {\r\n                        result: dictionary,\r\n                        status: LocalizationDictionaryStatusSuccess(scope),\r\n                    },\r\n                );\r\n            }, (status: IDictionaryError) => {\r\n                reject(\r\n                    {\r\n                        result: null,\r\n                        status,\r\n                    },\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    private checkCultureName(cultureName?: string): string {\r\n        if (cultureName) {\r\n            return cultureName;\r\n        }\r\n\r\n        return this.getCurrentCulture();\r\n    }\r\n\r\n    private checkScope(scope?: string): string {\r\n        if (scope) {\r\n            return scope;\r\n        }\r\n\r\n        return this.mGlobalScope;\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use getLocalizationDictionaryAsync\r\n     */\r\n    private getLocalizationDictionary(scope: string, cultureName: string): LocalizationDictionary {\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n        const dictionary = this.mDictionary[dictionaryKey];\r\n        if (typeof dictionary === \"undefined\") {\r\n            this.downloadDictionary(scope, cultureName);\r\n\r\n            return this.mDictionary[dictionaryKey];\r\n        }\r\n\r\n        return dictionary;\r\n    }\r\n\r\n    private getLocalizationDictionaryAsync(\r\n        scope: string,\r\n        cultureName: string,\r\n        onSuccess: (dictionary: LocalizationDictionary) => void,\r\n        onFailed: (scope: IDictionaryError) => void,\r\n    ): void {\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n        const dictionary = this.mDictionary[dictionaryKey];\r\n\r\n        if (dictionary === undefined) {\r\n            this.downloadDictionaryAsync(scope, cultureName, onSuccess, onFailed);\r\n        } else {\r\n            onSuccess(dictionary);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use getPluralizationLocalizationDictionaryAsync\r\n     */\r\n    private getPluralizationLocalizationDictionary(scope: string, cultureName: string):\r\n        LocalizationPluralizationDictionary {\r\n        let dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n        let dictionary = this.mPluralizedDictionary[dictionaryKey];\r\n        if (typeof dictionary === \"undefined\") {\r\n            this.downloadPluralizedDictionary(scope, cultureName);\r\n\r\n            return this.mPluralizedDictionary[dictionaryKey];\r\n        }\r\n\r\n        return dictionary;\r\n    }\r\n\r\n    private getPluralizationLocalizationDictionaryAsync(\r\n        scope: string,\r\n        cultureName: string,\r\n        onSuccess: (dictionary: LocalizationPluralizationDictionary) => void,\r\n        onFailed: (scope: IDictionaryError) => void,\r\n    ) {\r\n        let dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n        let dictionary = this.mPluralizedDictionary[dictionaryKey];\r\n\r\n        if (dictionary === undefined) {\r\n            this.downloadPluralizedDictionaryAsync(scope, cultureName, onSuccess, onFailed);\r\n        } else {\r\n            onSuccess(dictionary);\r\n        }\r\n    }\r\n\r\n    private dictionaryKey(scope: string, cultureName: string): string {\r\n        return scope.concat(\"|\", cultureName);\r\n    }\r\n\r\n    /**\r\n     *@deprecated Use downloadDictionaryAsync\r\n     */\r\n    private downloadDictionary(\r\n        scope: string,\r\n        cultureName: string,\r\n    ): void {\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n\r\n        if (this.mDictionaryQueue[scope] === undefined) {\r\n            this.mDictionaryQueue[scope] = [];\r\n        }\r\n\r\n        const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n        xmlHttpRequest.onreadystatechange = () => {\r\n            if (\r\n                xmlHttpRequest.readyState === XMLHttpRequest.DONE\r\n                && xmlHttpRequest.status === 200\r\n            ) {\r\n                let response = xmlHttpRequest.responseText;\r\n\r\n                if (this.mDictionary[dictionaryKey] === undefined) {\r\n                    this.mDictionary[dictionaryKey] = new LocalizationDictionary(response, scope);\r\n                }\r\n\r\n                this.processDictionaryQueue(scope, dictionaryKey);\r\n            }\r\n        };\r\n\r\n        xmlHttpRequest.open(\r\n            \"GET\",\r\n            `${this.getBaseUrl()}/Localization/Dictionary?scope=${scope}`,\r\n            false,\r\n        );\r\n        xmlHttpRequest.send();\r\n    }\r\n\r\n    private downloadDictionaryAsync(\r\n        scope: string, cultureName: string,\r\n        onSuccess: (dictionary: LocalizationDictionary) => void,\r\n        onFailed: (scope: IDictionaryError) => void,\r\n    ): void {\r\n        /*\r\n        this.getDownloadPromise(\r\n            (response) => new LocalizationDictionary(response),\r\n            this.mDictionary,\r\n            \"Dictionary\",\r\n            scope,\r\n            cultureName\r\n        );\r\n        */\r\n\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n\r\n        if (this.mDictionaryQueue[scope] === undefined) {\r\n            this.mDictionaryQueue[scope] = [];\r\n\r\n            const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n            xmlHttpRequest.onreadystatechange = () => {\r\n                if (xmlHttpRequest.readyState !== XMLHttpRequest.DONE) {\r\n                    return;\r\n                }\r\n\r\n                if (xmlHttpRequest.status === 200) {\r\n                    let response = xmlHttpRequest.responseText;\r\n\r\n                    if (this.mDictionary[dictionaryKey] === undefined) {\r\n                        this.mDictionary[dictionaryKey] = new LocalizationDictionary(response, scope);\r\n                    }\r\n\r\n                    this.processDictionaryQueue(scope, dictionaryKey);\r\n                } else {\r\n                    onFailed(\r\n                        {\r\n                            scope,\r\n                            context: xmlHttpRequest,\r\n                        },\r\n                    );\r\n                }\r\n            };\r\n\r\n            xmlHttpRequest.open(\r\n                \"GET\",\r\n                `${this.getBaseUrl()}/Localization/Dictionary?scope=${scope}`,\r\n                true,\r\n            );\r\n            xmlHttpRequest.send();\r\n        }\r\n\r\n        this.mDictionaryQueue[scope].push(onSuccess);\r\n\r\n        this.processDictionaryQueue(scope, dictionaryKey);\r\n    }\r\n\r\n    private processDictionaryQueue(scope: string, dictionaryKey: string): void {\r\n        if (this.mDictionary[dictionaryKey] !== undefined) {\r\n            let onSuccessQueue = this.mDictionaryQueue[scope].shift();\r\n            while (onSuccessQueue !== undefined) {\r\n                onSuccessQueue(this.mDictionary[dictionaryKey]);\r\n\r\n                onSuccessQueue = this.mDictionaryQueue[scope].shift();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use downloadPluralizedDictionaryAsync\r\n     */\r\n    private downloadPluralizedDictionary(\r\n        scope: string,\r\n        cultureName: string,\r\n    ): void {\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n\r\n        if (this.mPluralizedDictionaryQueue[scope] === undefined) {\r\n            this.mPluralizedDictionaryQueue[scope] = [];\r\n        }\r\n\r\n        const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n        xmlHttpRequest.onreadystatechange = () => {\r\n            if (\r\n                xmlHttpRequest.readyState === XMLHttpRequest.DONE\r\n                && xmlHttpRequest.status === 200\r\n            ) {\r\n                let response = xmlHttpRequest.responseText;\r\n\r\n                if (this.mPluralizedDictionary[dictionaryKey] === undefined) {\r\n                    this.mPluralizedDictionary[dictionaryKey] = new LocalizationPluralizationDictionary(response, scope);\r\n                }\r\n\r\n                this.processPluralizedDictionaryQueue(scope, dictionaryKey);\r\n            }\r\n        };\r\n\r\n        xmlHttpRequest.open(\r\n            \"GET\",\r\n            `${this.getBaseUrl()}/Localization/PluralizedDictionary?scope=${scope}`,\r\n            false,\r\n        );\r\n        xmlHttpRequest.send();\r\n    }\r\n\r\n    private downloadPluralizedDictionaryAsync(\r\n        scope: string,\r\n        cultureName: string,\r\n        onSuccess: (dictionary: LocalizationPluralizationDictionary) => void,\r\n        onFailed: (scope: IDictionaryError) => void,\r\n    ): void {\r\n        /*\r\n        this.getDownloadPromise(\r\n            (response) => new LocalizationPluralizationDictionary(response),\r\n            this.mPluralizedDictionary,\r\n            \"PluralizedDictionary\",\r\n            scope,\r\n            cultureName\r\n        );\r\n        */\r\n\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n\r\n        if (this.mPluralizedDictionaryQueue[scope] === undefined) {\r\n            this.mPluralizedDictionaryQueue[scope] = [];\r\n\r\n            const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n            xmlHttpRequest.onreadystatechange = () => {\r\n                if (xmlHttpRequest.readyState !== XMLHttpRequest.DONE) {\r\n                    return;\r\n                }\r\n\r\n                if (xmlHttpRequest.status === 200) {\r\n                    let response = xmlHttpRequest.responseText;\r\n\r\n                    if (this.mPluralizedDictionary[dictionaryKey] === undefined) {\r\n                        this.mPluralizedDictionary[dictionaryKey] = new LocalizationPluralizationDictionary(response, scope);\r\n                    }\r\n\r\n                    this.processPluralizedDictionaryQueue(scope, dictionaryKey);\r\n                } else {\r\n                    onFailed(\r\n                        {\r\n                            scope,\r\n                            context: xmlHttpRequest,\r\n                        },\r\n                    );\r\n                }\r\n            };\r\n\r\n            xmlHttpRequest.open(\r\n                \"GET\",\r\n                `${this.getBaseUrl()}/Localization/PluralizedDictionary?scope=${scope}`,\r\n                true,\r\n            );\r\n            xmlHttpRequest.send();\r\n        }\r\n\r\n        this.mPluralizedDictionaryQueue[scope].push(onSuccess);\r\n\r\n        this.processPluralizedDictionaryQueue(scope, dictionaryKey);\r\n    }\r\n\r\n    private processPluralizedDictionaryQueue(scope: string, dictionaryKey: string): void {\r\n        if (this.mPluralizedDictionary[dictionaryKey] !== undefined) {\r\n            let onSuccessQueue = this.mPluralizedDictionaryQueue[scope].shift();\r\n            while (onSuccessQueue !== undefined) {\r\n                onSuccessQueue(this.mPluralizedDictionary[dictionaryKey]);\r\n\r\n                onSuccessQueue = this.mPluralizedDictionaryQueue[scope].shift();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO Use in downloadPluralizedDictionaryAsync and downloadDictionaryAsync when synchronous methods are removed\r\n     */\r\n    private getDownloadPromise(\r\n        dictionaryFactory: (response: string) => BaseLocalizationDictionary<IPluralizedString>,\r\n        dictionaryCache: { [key: string]: BaseLocalizationDictionary<IPluralizedString> },\r\n        path: string,\r\n        scope: string,\r\n        cultureName: string,\r\n    ): Promise<BaseLocalizationDictionary<IPluralizedString>> {\r\n        const dictionaryKey = this.dictionaryKey(scope, cultureName);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n            xmlHttpRequest.open(\r\n                \"GET\",\r\n                `${this.getBaseUrl()}/Localization/${path}?scope=${scope}`,\r\n                true,\r\n            );\r\n            xmlHttpRequest.send();\r\n\r\n            xmlHttpRequest.onreadystatechange = () => {\r\n                if (xmlHttpRequest.readyState !== XMLHttpRequest.DONE) {\r\n                    return;\r\n                }\r\n\r\n                if (\r\n                    xmlHttpRequest.status >= 200 && xmlHttpRequest.status < 300\r\n                ) {\r\n                    let response = xmlHttpRequest.responseText;\r\n\r\n                    if (dictionaryCache[dictionaryKey] === undefined) {\r\n                        dictionaryCache[dictionaryKey] = dictionaryFactory(response);\r\n                    }\r\n\r\n                    resolve(dictionaryCache[dictionaryKey]);\r\n                } else {\r\n                    reject({\r\n                        scope,\r\n                        status: xmlHttpRequest.status,\r\n                        statusText: xmlHttpRequest.statusText,\r\n                        context: xmlHttpRequest,\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    private getBaseUrl(): string {\r\n        let baseUrl = this.mLocalizationConfiguration.siteUrl;\r\n        if (baseUrl && baseUrl.charAt(baseUrl.length - 1) === \"/\") {\r\n            baseUrl = baseUrl.substring(0, baseUrl.length - 1);\r\n        }\r\n\r\n        return baseUrl;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Use getCurrentCultureAsync\r\n     */\r\n    public getCurrentCulture(): string {\r\n        if (this.mCurrentCulture === undefined) {\r\n            const parsedCookieValue = this.getParsedCultureCookie();\r\n            if (!parsedCookieValue) {\r\n                const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n                xmlHttpRequest.onreadystatechange = () => {\r\n                    if (\r\n                        xmlHttpRequest.readyState === XMLHttpRequest.DONE\r\n                        && xmlHttpRequest.status === 200\r\n                    ) {\r\n                        let response = xmlHttpRequest.responseText;\r\n\r\n                        this.setCurrentCulture(response);\r\n                    }\r\n                };\r\n\r\n                xmlHttpRequest.open(\r\n                    \"GET\",\r\n                    `${this.getBaseUrl()}/Localization/CurrentCulture`,\r\n                    false,\r\n                );\r\n                xmlHttpRequest.send();\r\n            } else {\r\n                this.setCurrentCulture(parsedCookieValue.currentCulture);\r\n            }\r\n        }\r\n\r\n        return this.mCurrentCulture;\r\n    }\r\n\r\n    public getCurrentCultureAsync(): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.mCurrentCulture === undefined) {\r\n                const parsedCookieValue = this.getParsedCultureCookie();\r\n                if (!parsedCookieValue) {\r\n                    const xmlHttpRequest = new XMLHttpRequest();\r\n\r\n                    xmlHttpRequest.onreadystatechange = () => {\r\n                        if (xmlHttpRequest.readyState !== XMLHttpRequest.DONE) {\r\n                            return;\r\n                        }\r\n\r\n                        if (xmlHttpRequest.status === 200) {\r\n                            this.setCurrentCulture(xmlHttpRequest.responseText);\r\n                            resolve(this.mCurrentCulture);\r\n                        } else {\r\n                            reject();\r\n                        }\r\n                    };\r\n\r\n                    xmlHttpRequest.open(\r\n                        \"GET\",\r\n                        `${this.getBaseUrl()}/Localization/CurrentCulture`,\r\n                        true,\r\n                    );\r\n                    xmlHttpRequest.send();\r\n                } else {\r\n                    this.setCurrentCulture(parsedCookieValue.currentCulture);\r\n                }\r\n            }\r\n\r\n            resolve(this.mCurrentCulture);\r\n        });\r\n    }\r\n\r\n    private setCurrentCulture(culture: string) {\r\n        this.mCurrentCulture = culture;\r\n    }\r\n\r\n    private getParsedCultureCookie(): ILocalizationCookie {\r\n        const currentCultureCookieValue = this.getCurrentCultureCookie();\r\n        if (!currentCultureCookieValue) {\r\n            return null;\r\n        }\r\n\r\n        const parsedCookieValue = JSON.parse(currentCultureCookieValue) as ILocalizationCookie;\r\n\r\n        if (\r\n            parsedCookieValue.currentCulture === undefined\r\n        ) {\r\n            console.error(\r\n                `Unexpected value of the cookie ${this.mCultureCookieName}. Expected object with property 'currentCulture'.`,\r\n                parsedCookieValue,\r\n            );\r\n        }\r\n\r\n        return parsedCookieValue;\r\n    }\r\n\r\n    private getCurrentCultureCookie(): string {\r\n        return LocalizationUtils.getCookie(this.mCultureCookieName);\r\n    }\r\n}\r\n\r\nabstract class BaseLocalizationDictionary<TResponse> {\r\n    protected readonly mDictionary: { [key: string]: TResponse };\r\n    private readonly mScope: string;\r\n\r\n    protected constructor(dictionary: string, scope: string) {\r\n        this.mDictionary = JSON.parse(dictionary);\r\n        this.mScope = scope;\r\n    }\r\n\r\n    public getFallbackTranslation(text: string, scope: string, cultureName: string): ILocalizedString {\r\n        console.log(\r\n            `Localized string with key=${text} was not found in dictionary=${scope} with culture=${cultureName}`,\r\n        );\r\n\r\n        return {name: text, value: \"X{undefined}\", resourceNotFound: true};\r\n    }\r\n\r\n    public get scope() {\r\n        return this.mScope;\r\n    }\r\n}\r\n\r\nclass LocalizationDictionary extends BaseLocalizationDictionary<ILocalizedString> {\r\n    constructor(dictionary: string, scope: string) {\r\n        super(dictionary, scope);\r\n    }\r\n\r\n    public translate(text: string, fallback: () => ILocalizedString): ILocalizedString | null {\r\n        const result = this.mDictionary[text];\r\n\r\n        if (result === undefined) {\r\n            return fallback();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public translateFormat(text: string, parameters: string[], fallback: () => ILocalizedString): ILocalizedString {\r\n        const translation = this.translate(text, () => null);\r\n\r\n        if (translation === null) {\r\n            return fallback();\r\n        }\r\n\r\n        const formatedText = !parameters ? translation.value : this.formatString(translation, parameters);\r\n\r\n        return {name: text, value: formatedText, resourceNotFound: translation.resourceNotFound};\r\n    }\r\n\r\n    private formatString(str: ILocalizedString, obj: string[]): string {\r\n        return str.value.replace(/\\{\\s*([^}\\s]+)\\s*\\}/g, (m, p1, offset, string) => obj[p1]);\r\n    }\r\n}\r\n\r\nclass LocalizationPluralizationDictionary extends BaseLocalizationDictionary<IPluralizedString> {\r\n    constructor(dictionary: string, scope: string) {\r\n        super(dictionary, scope);\r\n    }\r\n\r\n    public translatePluralization(text: string, number: number, fallback: () => ILocalizedString): ILocalizedString {\r\n        const pluralizedString = this.mDictionary[text];\r\n\r\n        if (pluralizedString === undefined || pluralizedString === null) {\r\n            return fallback();\r\n        }\r\n\r\n        for (let interval of pluralizedString.intervals) {\r\n            const translationInterval = interval.interval;\r\n\r\n            if (LocalizationUtils.isInInterval(number, translationInterval)) {\r\n                return interval.localizedString;\r\n            }\r\n\r\n        }\r\n\r\n        return pluralizedString.defaultLocalizedString;\r\n    }\r\n}\r\n\r\nenum LocalizationErrorResolution {\r\n    Null = 0,\r\n    Key = 1,\r\n}\r\n\r\ninterface ILocalizationConfiguration {\r\n    errorResolution: LocalizationErrorResolution,\r\n    siteUrl?: string,\r\n    onError?: (localizationError: ILocalizationError) => void,\r\n}\r\n\r\ninterface ILocalizationCookie {\r\n    currentCulture: string;\r\n}\r\n\r\ninterface ILocalizationError {\r\n    text: string;\r\n    scope: string;\r\n    message: string;\r\n    errorType?: string;\r\n    dictionary?: string;\r\n    context?: object;\r\n}\r\n\r\ninterface ILocalizationStatus {\r\n    success: boolean;\r\n    text: string;\r\n    scope: string;\r\n    message: string;\r\n    errorType?: string;\r\n    dictionary?: string;\r\n    context?: object;\r\n}\r\n\r\ninterface IDictionaryError {\r\n    scope: string;\r\n    context: object | null;\r\n}\r\n\r\ninterface ILocalizationDictionaryResult<TDictionary> {\r\n    result: TDictionary | null,\r\n    status: IDictionaryError,\r\n}\r\n\r\ninterface ILocalizationResult {\r\n    result: ILocalizedString,\r\n    status: ILocalizationStatus,\r\n\r\n    toString(): string,\r\n}\r\n\r\nclass LocalizationResult implements ILocalizationResult {\r\n    public readonly result: ILocalizedString;\r\n    public readonly status: ILocalizationStatus;\r\n\r\n    constructor(result: ILocalizedString, status: ILocalizationStatus) {\r\n        this.result = result;\r\n        this.status = status;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.result.value;\r\n    }\r\n}\r\n\r\ninterface ILocalizedString {\r\n    name: string;\r\n    resourceNotFound: boolean;\r\n    value: string;\r\n}\r\n\r\ninterface IPluralizedString {\r\n    intervals: IIntervalWithTranslation[];\r\n    defaultLocalizedString: ILocalizedString;\r\n}\r\n\r\ninterface IIntervalWithTranslation {\r\n    interval: PluralizationInterval;\r\n    localizedString: ILocalizedString;\r\n}\r\n\r\nclass PluralizationInterval {\r\n    public readonly start: number;\r\n    public readonly end: number;\r\n\r\n    constructor(start: number, end: number) {\r\n        if (start > end) {\r\n            const intervalErrorMsg = \"The start value should be less or equal than end.\";\r\n\r\n            throw new Error(intervalErrorMsg);\r\n        }\r\n\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n}\r\n\r\nclass LocalizationUtils {\r\n\r\n    public static getCookie(name: string): string {\r\n        name = name + \"=\";\r\n        return document.cookie\r\n                .split(\";\")\r\n                .map(c => c.trim())\r\n                .filter(cookie => cookie.indexOf(name) === 0)\r\n                .map(cookie => decodeURIComponent(cookie.substring(name.length)))[0]\r\n            || null;\r\n    }\r\n\r\n    /*\r\n     * Returns true when value is in the pluralization interval\r\n     */\r\n    public static isInInterval(value: number, interval: PluralizationInterval): boolean {\r\n        if (!interval) {\r\n            return false;\r\n        }\r\n\r\n        return interval.start <= value && value <= interval.end;\r\n    }\r\n}\r\n"]}